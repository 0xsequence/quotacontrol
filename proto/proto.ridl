webrpc = v1 # TODO, use v2

name = quota-control
version = v0.1.0

enum Service: uint16
  - NodeGateway
  - Indexer

struct ServiceLimit
  - service: Service
  - computeRateLimit: int64
  - computeMonthlyQuota: int64
  - computeMonthlyHardQuota: int64

struct AccessToken
  - projectId: uint64
    + go.field.name = ProjectID
    + go.tag.db = project_id

  - displayName: string
    + go.tag.db = display_name

  - tokenKey: string
    + go.tag.db = token_key

  - active: bool
    + go.tag.db = active

  - allowedOrigins: []string
    + go.tag.db = allowed_origins

  - allowedServices: []Service
    + go.tag.db = allowed_services

  - createdAt?: timestamp
    + json = createdAt
    + go.tag.json = createdAt,omitempty
    + go.tag.db = created_at,omitempty

struct AccessTokenUsage
  - validCompute: int64
    + go.tag.db = valid_compute
  - overCompute: int64
    + go.tag.db = over_compute
  - limitedCompute: int64
    + go.tag.db = limited_compute

struct CachedToken
  - config: []ServiceLimit
  - accessToken: AccessToken


error 1000 NotImplemented   "Endpoint not implemented" HTTP 501
error 1001 Timeout          "Request timed out" HTTP 408
error 1002 LimitExceeded    "Request limit exceeded" HTTP 429
error 1003 InvalidOrigin    "Invalid origin" HTTP 403
error 1004 InvalidService   "Invalid service" HTTP 403
error 1005 TokenNotFound    "Token not found" HTTP 404


service QuotaControl
  # Access Limit
  - GetAccessLimit(projectId: uint64) => (config: []ServiceLimit)
  - SetAccessLimit(projectId: uint64, config: []ServiceLimit) => (ok: bool)

  # Access Token
  - GetAccessToken(tokenKey: string) => (accessToken: AccessToken)
  - CreateAccessToken(projectId: uint64, displayName: string, allowedOrigins: []string, allowedServices: []Service) => (accessToken: AccessToken)
  - UpdateAccessToken(tokenKey: string, displayName?: string, allowedOrigins?: []string, allowedServices?: []Service) => (accessToken: AccessToken)
  - ListAccessTokens(projectId: uint64) => (accessTokens: []AccessToken)
  - DisableAccessToken(tokenKey: string) => (ok: bool)

  # Usage
  - PrepareUsage(projectID: uint64, service?: Service, now: timestamp) => (ok: bool)
  - RetrieveToken(tokenKey: string) => (token: CachedToken)
  - UpdateUsage(service: Service, now: timestamp, usage: map<string,AccessTokenUsage>) => (ok: map<string,bool>)
