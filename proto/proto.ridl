webrpc = v1

name = quota-control
version = v0.1.0

enum Service: uint16
  - NodeGateway
  - API
  - Indexer
  - Relayer
  - Metadata

struct Limit
  - maxKeys: int64
    + go.tag.json = maxKeys,omitempty
  - rateLimit: int64
  - freeCU: int64
  - softQuota: int64
  - hardQuota: int64

struct AccessKey
  - projectId: uint64
    + go.field.name = ProjectID
    + go.tag.db = project_id

  - displayName: string
    + go.tag.db = display_name

  - accessKey: string
    + go.tag.db = access_key

  - active: bool
    + go.tag.db = active

  - default: bool
    + go.field.name = Default
    + go.tag.db = is_default

  - allowedOrigins: []string
    + go.tag.db = allowed_origins

  - allowedServices: []Service
    + go.tag.db = allowed_services

  - createdAt?: timestamp
    + json = createdAt
    + go.tag.json = createdAt,omitempty
    + go.tag.db = created_at,omitempty

struct AccessUsage
  - validCompute: int64
    + go.tag.db = valid_compute
  - overCompute: int64
    + go.tag.db = over_compute
  - limitedCompute: int64
    + go.tag.db = limited_compute

struct Cycle
  - start: timestamp
  - end: timestamp

struct AccessQuota
  - cycle: Cycle
  - limit: Limit
  - accessKey: AccessKey

enum EventType: uint16
  - FreeCU # Project runs out of free compute units
  - SoftQuota # Project goes over the soft quota
  - HardQuota # Project goes reached the hard quota

enum UserPermission: uint16
  - UNAUTHORIZED
  - READ
  - READ_WRITE
  - ADMIN


error 1001 Timeout            "Request timed out" HTTP 408
error 1002 LimitExceeded      "Request limit exceeded" HTTP 429
error 1003 InvalidOrigin      "Invalid origin" HTTP 403
error 1004 InvalidService     "Access key is not configured for this service" HTTP 403
error 1005 AccessKeyNotFound  "Access key not found" HTTP 401
error 1006 UnauthorizedUser   "Unauthorized user" HTTP 403
error 1007 MaxAccessKeys      "Access keys limit reached" HTTP 403
error 1008 NoDefaultKey       "No default access key found" HTTP 403
error 1009 AtLeastOneKey      "There should be at least one active accessKey per project" HTTP 403

service QuotaControl
  # Access Key
  - GetAccessKey(accessKey: string) => (accessKey: AccessKey)
  - GetDefaultAccessKey(projectID: uint64) => (accessKey: AccessKey)
  - CreateAccessKey(projectId: uint64, displayName: string, allowedOrigins: []string, allowedServices: []Service) => (accessKey: AccessKey)
  - RotateAccessKey(accessKey: string) => (accessKey: AccessKey)
  - UpdateAccessKey(accessKey: string, displayName?: string, allowedOrigins?: []string, allowedServices?: []Service) => (accessKey: AccessKey)
  - UpdateDefaultAccessKey(projectID: uint64, accessKey: string) => (ok: bool)
  - ListAccessKeys(projectId: uint64, active?: bool, service?: Service) => (accessKeys: []AccessKey)
  - DisableAccessKey(accessKey: string) => (ok: bool)

  # Usage
  - GetAccessQuota(accessKey: string, now: timestamp) => (accessQuota: AccessQuota)
  - ClearAccessQuotaCache(projectID: uint64) => (ok: bool)
  - GetAccountUsage(projectID: uint64, service?: Service, from?: timestamp, to?: timestamp) => (usage: AccessUsage)
  - GetAccessKeyUsage(accessKey: string, service?: Service, from?: timestamp, to?: timestamp) => (usage: AccessUsage)
  - PrepareUsage(projectID: uint64, cycle: Cycle, now: timestamp) => (ok: bool)
  - NotifyEvent(projectID: uint64, eventType: EventType) => (ok: bool)
  - UpdateUsage(service: Service, now: timestamp, usage: map<string,AccessUsage>) => (ok: map<string,bool>)

  # User permissions for a projectId
  - GetUserPermission(projectId: uint64, userId: string) => (permission: UserPermission, resourceAccess: map<string,any>)
