// quota-control v0.1.0 75c12600990df262f9b52cfd988d974720c257e8
// --
// Code generated by webrpc-gen@v0.18.6 with golang@v0.14.8 generator. DO NOT EDIT.
//
// webrpc-gen -schema=proto.ridl -target=golang@v0.14.8 -pkg=quotacontrol -client -out=./clients/quotacontrol.gen.go
package quotacontrol

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"time"

	"github.com/0xsequence/go-sequence/lib/prototyp"
	"github.com/goware/validation"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.1.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "75c12600990df262f9b52cfd988d974720c257e8"
}

//
// Common types
//

type Service uint16

const (
	Service_NodeGateway Service = 0
	Service_API         Service = 1
	Service_Indexer     Service = 2
	Service_Relayer     Service = 3
	Service_Metadata    Service = 4
	Service_Marketplace Service = 5
	Service_DataSync    Service = 6
)

var Service_name = map[uint16]string{
	0: "NodeGateway",
	1: "API",
	2: "Indexer",
	3: "Relayer",
	4: "Metadata",
	5: "Marketplace",
	6: "DataSync",
}

var Service_value = map[string]uint16{
	"NodeGateway": 0,
	"API":         1,
	"Indexer":     2,
	"Relayer":     3,
	"Metadata":    4,
	"Marketplace": 5,
	"DataSync":    6,
}

func (x Service) String() string {
	return Service_name[uint16(x)]
}

func (x Service) MarshalText() ([]byte, error) {
	return []byte(Service_name[uint16(x)]), nil
}

func (x *Service) UnmarshalText(b []byte) error {
	*x = Service(Service_value[string(b)])
	return nil
}

func (x *Service) Is(values ...Service) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type EventType uint16

const (
	EventType_FreeWarn EventType = 0
	EventType_FreeMax  EventType = 1
	EventType_OverWarn EventType = 2
	EventType_OverMax  EventType = 3
)

var EventType_name = map[uint16]string{
	0: "FreeWarn",
	1: "FreeMax",
	2: "OverWarn",
	3: "OverMax",
}

var EventType_value = map[string]uint16{
	"FreeWarn": 0,
	"FreeMax":  1,
	"OverWarn": 2,
	"OverMax":  3,
}

func (x EventType) String() string {
	return EventType_name[uint16(x)]
}

func (x EventType) MarshalText() ([]byte, error) {
	return []byte(EventType_name[uint16(x)]), nil
}

func (x *EventType) UnmarshalText(b []byte) error {
	*x = EventType(EventType_value[string(b)])
	return nil
}

func (x *EventType) Is(values ...EventType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type SessionType uint16

const (
	SessionType_Public    SessionType = 0
	SessionType_Account   SessionType = 1
	SessionType_AccessKey SessionType = 2
	SessionType_Project   SessionType = 3
	SessionType_Admin     SessionType = 4
	SessionType_Service   SessionType = 5
)

var SessionType_name = map[uint16]string{
	0: "Public",
	1: "Account",
	2: "AccessKey",
	3: "Project",
	4: "Admin",
	5: "Service",
}

var SessionType_value = map[string]uint16{
	"Public":    0,
	"Account":   1,
	"AccessKey": 2,
	"Project":   3,
	"Admin":     4,
	"Service":   5,
}

func (x SessionType) String() string {
	return SessionType_name[uint16(x)]
}

func (x SessionType) MarshalText() ([]byte, error) {
	return []byte(SessionType_name[uint16(x)]), nil
}

func (x *SessionType) UnmarshalText(b []byte) error {
	*x = SessionType(SessionType_value[string(b)])
	return nil
}

func (x *SessionType) Is(values ...SessionType) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type UserPermission uint16

const (
	UserPermission_UNAUTHORIZED UserPermission = 0
	UserPermission_READ         UserPermission = 1
	UserPermission_READ_WRITE   UserPermission = 2
	UserPermission_ADMIN        UserPermission = 3
)

var UserPermission_name = map[uint16]string{
	0: "UNAUTHORIZED",
	1: "READ",
	2: "READ_WRITE",
	3: "ADMIN",
}

var UserPermission_value = map[string]uint16{
	"UNAUTHORIZED": 0,
	"READ":         1,
	"READ_WRITE":   2,
	"ADMIN":        3,
}

func (x UserPermission) String() string {
	return UserPermission_name[uint16(x)]
}

func (x UserPermission) MarshalText() ([]byte, error) {
	return []byte(UserPermission_name[uint16(x)]), nil
}

func (x *UserPermission) UnmarshalText(b []byte) error {
	*x = UserPermission(UserPermission_value[string(b)])
	return nil
}

func (x *UserPermission) Is(values ...UserPermission) bool {
	if x == nil {
		return false
	}
	for _, v := range values {
		if *x == v {
			return true
		}
	}
	return false
}

type Limit struct {
	MaxKeys           int64 `json:"maxKeys,omitempty"`
	RateLimit         int64 `json:"rateLimit"`
	FreeWarn          int64 `json:"freeWarn"`
	FreeMax           int64 `json:"freeMax"`
	OverWarn          int64 `json:"overWarn"`
	OverMax           int64 `json:"overMax"`
	BlockTransactions bool  `json:"blockTransactions"`
}

type AccessKey struct {
	ProjectID       uint64             `json:"projectId" db:"project_id"`
	DisplayName     string             `json:"displayName" db:"display_name"`
	AccessKey       string             `json:"accessKey" db:"access_key"`
	Active          bool               `json:"active" db:"active"`
	Default         bool               `json:"default" db:"is_default"`
	AllowedOrigins  validation.Origins `json:"allowedOrigins" db:"allowed_origins"`
	AllowedServices []*Service         `json:"allowedServices" db:"allowed_services"`
	CreatedAt       *time.Time         `json:"createdAt,omitempty" db:"created_at,omitempty"`
}

type AccessUsage struct {
	ValidCompute   int64 `json:"validCompute" db:"valid_compute"`
	OverCompute    int64 `json:"overCompute" db:"over_compute"`
	LimitedCompute int64 `json:"limitedCompute" db:"limited_compute"`
}

type Cycle struct {
	Start time.Time `json:"start"`
	End   time.Time `json:"end"`
}

type AccessQuota struct {
	Cycle     *Cycle     `json:"cycle"`
	Limit     *Limit     `json:"limit"`
	AccessKey *AccessKey `json:"accessKey"`
}

type ProjectStatus struct {
	ProjectID        uint64 `json:"projectId"`
	Limit            *Limit `json:"limit"`
	UsageCounter     int64  `json:"usageCounter"`
	RatelimitCounter int64  `json:"ratelimitCounter"`
}

type Subscription struct {
	Tier string `json:"tier"`
}

type Minter struct {
	Contracts []prototyp.Hash `json:"contracts"`
}

type ResourceAccess struct {
	ProjectID    uint64        `json:"projectId"`
	Subscription *Subscription `json:"subscription"`
	Minter       *Minter       `json:"minter"`
}

var WebRPCServices = map[string][]string{
	"QuotaControl": {
		"GetProjectStatus",
		"GetAccessKey",
		"GetDefaultAccessKey",
		"CreateAccessKey",
		"RotateAccessKey",
		"UpdateAccessKey",
		"UpdateDefaultAccessKey",
		"ListAccessKeys",
		"DisableAccessKey",
		"GetProjectQuota",
		"GetAccessQuota",
		"ClearAccessQuotaCache",
		"GetAccountUsage",
		"GetAccessKeyUsage",
		"GetAsyncUsage",
		"PrepareUsage",
		"ClearUsage",
		"NotifyEvent",
		"UpdateProjectUsage",
		"UpdateKeyUsage",
		"UpdateUsage",
		"GetUserPermission",
	},
}

//
// Server types
//

type QuotaControl interface {
	// Project
	GetProjectStatus(ctx context.Context, projectId uint64) (*ProjectStatus, error)
	// Access Key
	GetAccessKey(ctx context.Context, accessKey string) (*AccessKey, error)
	GetDefaultAccessKey(ctx context.Context, projectID uint64) (*AccessKey, error)
	CreateAccessKey(ctx context.Context, projectId uint64, displayName string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error)
	RotateAccessKey(ctx context.Context, accessKey string) (*AccessKey, error)
	UpdateAccessKey(ctx context.Context, accessKey string, displayName *string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error)
	UpdateDefaultAccessKey(ctx context.Context, projectID uint64, accessKey string) (bool, error)
	ListAccessKeys(ctx context.Context, projectId uint64, active *bool, service *Service) ([]*AccessKey, error)
	DisableAccessKey(ctx context.Context, accessKey string) (bool, error)
	// Usage
	GetProjectQuota(ctx context.Context, projectId uint64, now time.Time) (*AccessQuota, error)
	GetAccessQuota(ctx context.Context, accessKey string, now time.Time) (*AccessQuota, error)
	ClearAccessQuotaCache(ctx context.Context, projectID uint64) (bool, error)
	GetAccountUsage(ctx context.Context, projectID uint64, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error)
	GetAccessKeyUsage(ctx context.Context, accessKey string, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error)
	GetAsyncUsage(ctx context.Context, projectID uint64, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error)
	PrepareUsage(ctx context.Context, projectID uint64, cycle *Cycle, now time.Time) (bool, error)
	ClearUsage(ctx context.Context, projectID uint64, now time.Time) (bool, error)
	NotifyEvent(ctx context.Context, projectID uint64, eventType EventType) (bool, error)
	UpdateProjectUsage(ctx context.Context, service Service, now time.Time, usage map[uint64]*AccessUsage) (map[uint64]bool, error)
	UpdateKeyUsage(ctx context.Context, service Service, now time.Time, usage map[string]*AccessUsage) (map[string]bool, error)
	// DEPRECATED: this is now UpdateKeyUsage, and it will be removed in the future
	UpdateUsage(ctx context.Context, service Service, now time.Time, usage map[string]*AccessUsage) (map[string]bool, error)
	// User permissions for a projectId
	GetUserPermission(ctx context.Context, projectId uint64, userId string) (UserPermission, *ResourceAccess, error)
}

//
// Client types
//

type QuotaControlClient interface {
	// Project
	GetProjectStatus(ctx context.Context, projectId uint64) (*ProjectStatus, error)
	// Access Key
	GetAccessKey(ctx context.Context, accessKey string) (*AccessKey, error)
	GetDefaultAccessKey(ctx context.Context, projectID uint64) (*AccessKey, error)
	CreateAccessKey(ctx context.Context, projectId uint64, displayName string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error)
	RotateAccessKey(ctx context.Context, accessKey string) (*AccessKey, error)
	UpdateAccessKey(ctx context.Context, accessKey string, displayName *string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error)
	UpdateDefaultAccessKey(ctx context.Context, projectID uint64, accessKey string) (bool, error)
	ListAccessKeys(ctx context.Context, projectId uint64, active *bool, service *Service) ([]*AccessKey, error)
	DisableAccessKey(ctx context.Context, accessKey string) (bool, error)
	// Usage
	GetProjectQuota(ctx context.Context, projectId uint64, now time.Time) (*AccessQuota, error)
	GetAccessQuota(ctx context.Context, accessKey string, now time.Time) (*AccessQuota, error)
	ClearAccessQuotaCache(ctx context.Context, projectID uint64) (bool, error)
	GetAccountUsage(ctx context.Context, projectID uint64, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error)
	GetAccessKeyUsage(ctx context.Context, accessKey string, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error)
	GetAsyncUsage(ctx context.Context, projectID uint64, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error)
	PrepareUsage(ctx context.Context, projectID uint64, cycle *Cycle, now time.Time) (bool, error)
	ClearUsage(ctx context.Context, projectID uint64, now time.Time) (bool, error)
	NotifyEvent(ctx context.Context, projectID uint64, eventType EventType) (bool, error)
	UpdateProjectUsage(ctx context.Context, service Service, now time.Time, usage map[uint64]*AccessUsage) (map[uint64]bool, error)
	UpdateKeyUsage(ctx context.Context, service Service, now time.Time, usage map[string]*AccessUsage) (map[string]bool, error)
	// DEPRECATED: this is now UpdateKeyUsage, and it will be removed in the future
	UpdateUsage(ctx context.Context, service Service, now time.Time, usage map[string]*AccessUsage) (map[string]bool, error)
	// User permissions for a projectId
	GetUserPermission(ctx context.Context, projectId uint64, userId string) (UserPermission, *ResourceAccess, error)
}

//
// Client
//

const QuotaControlPathPrefix = "/rpc/QuotaControl/"

type quotaControlClient struct {
	client HTTPClient
	urls   [22]string
}

func NewQuotaControlClient(addr string, client HTTPClient) QuotaControlClient {
	prefix := urlBase(addr) + QuotaControlPathPrefix
	urls := [22]string{
		prefix + "GetProjectStatus",
		prefix + "GetAccessKey",
		prefix + "GetDefaultAccessKey",
		prefix + "CreateAccessKey",
		prefix + "RotateAccessKey",
		prefix + "UpdateAccessKey",
		prefix + "UpdateDefaultAccessKey",
		prefix + "ListAccessKeys",
		prefix + "DisableAccessKey",
		prefix + "GetProjectQuota",
		prefix + "GetAccessQuota",
		prefix + "ClearAccessQuotaCache",
		prefix + "GetAccountUsage",
		prefix + "GetAccessKeyUsage",
		prefix + "GetAsyncUsage",
		prefix + "PrepareUsage",
		prefix + "ClearUsage",
		prefix + "NotifyEvent",
		prefix + "UpdateProjectUsage",
		prefix + "UpdateKeyUsage",
		prefix + "UpdateUsage",
		prefix + "GetUserPermission",
	}
	return &quotaControlClient{
		client: client,
		urls:   urls,
	}
}

func (c *quotaControlClient) GetProjectStatus(ctx context.Context, projectId uint64) (*ProjectStatus, error) {
	in := struct {
		Arg0 uint64 `json:"projectId"`
	}{projectId}
	out := struct {
		Ret0 *ProjectStatus `json:"projectStatus"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) GetAccessKey(ctx context.Context, accessKey string) (*AccessKey, error) {
	in := struct {
		Arg0 string `json:"accessKey"`
	}{accessKey}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) GetDefaultAccessKey(ctx context.Context, projectID uint64) (*AccessKey, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) CreateAccessKey(ctx context.Context, projectId uint64, displayName string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error) {
	in := struct {
		Arg0 uint64     `json:"projectId"`
		Arg1 string     `json:"displayName"`
		Arg2 []string   `json:"allowedOrigins"`
		Arg3 []*Service `json:"allowedServices"`
	}{projectId, displayName, allowedOrigins, allowedServices}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) RotateAccessKey(ctx context.Context, accessKey string) (*AccessKey, error) {
	in := struct {
		Arg0 string `json:"accessKey"`
	}{accessKey}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[4], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) UpdateAccessKey(ctx context.Context, accessKey string, displayName *string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error) {
	in := struct {
		Arg0 string     `json:"accessKey"`
		Arg1 *string    `json:"displayName"`
		Arg2 []string   `json:"allowedOrigins"`
		Arg3 []*Service `json:"allowedServices"`
	}{accessKey, displayName, allowedOrigins, allowedServices}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[5], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) UpdateDefaultAccessKey(ctx context.Context, projectID uint64, accessKey string) (bool, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 string `json:"accessKey"`
	}{projectID, accessKey}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[6], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) ListAccessKeys(ctx context.Context, projectId uint64, active *bool, service *Service) ([]*AccessKey, error) {
	in := struct {
		Arg0 uint64   `json:"projectId"`
		Arg1 *bool    `json:"active"`
		Arg2 *Service `json:"service"`
	}{projectId, active, service}
	out := struct {
		Ret0 []*AccessKey `json:"accessKeys"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[7], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) DisableAccessKey(ctx context.Context, accessKey string) (bool, error) {
	in := struct {
		Arg0 string `json:"accessKey"`
	}{accessKey}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[8], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) GetProjectQuota(ctx context.Context, projectId uint64, now time.Time) (*AccessQuota, error) {
	in := struct {
		Arg0 uint64    `json:"projectId"`
		Arg1 time.Time `json:"now"`
	}{projectId, now}
	out := struct {
		Ret0 *AccessQuota `json:"accessQuota"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[9], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) GetAccessQuota(ctx context.Context, accessKey string, now time.Time) (*AccessQuota, error) {
	in := struct {
		Arg0 string    `json:"accessKey"`
		Arg1 time.Time `json:"now"`
	}{accessKey, now}
	out := struct {
		Ret0 *AccessQuota `json:"accessQuota"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[10], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) ClearAccessQuotaCache(ctx context.Context, projectID uint64) (bool, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[11], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) GetAccountUsage(ctx context.Context, projectID uint64, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error) {
	in := struct {
		Arg0 uint64     `json:"projectID"`
		Arg1 *Service   `json:"service"`
		Arg2 *time.Time `json:"from"`
		Arg3 *time.Time `json:"to"`
	}{projectID, service, from, to}
	out := struct {
		Ret0 *AccessUsage `json:"usage"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[12], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) GetAccessKeyUsage(ctx context.Context, accessKey string, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error) {
	in := struct {
		Arg0 string     `json:"accessKey"`
		Arg1 *Service   `json:"service"`
		Arg2 *time.Time `json:"from"`
		Arg3 *time.Time `json:"to"`
	}{accessKey, service, from, to}
	out := struct {
		Ret0 *AccessUsage `json:"usage"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[13], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) GetAsyncUsage(ctx context.Context, projectID uint64, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error) {
	in := struct {
		Arg0 uint64     `json:"projectID"`
		Arg1 *Service   `json:"service"`
		Arg2 *time.Time `json:"from"`
		Arg3 *time.Time `json:"to"`
	}{projectID, service, from, to}
	out := struct {
		Ret0 *AccessUsage `json:"usage"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[14], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) PrepareUsage(ctx context.Context, projectID uint64, cycle *Cycle, now time.Time) (bool, error) {
	in := struct {
		Arg0 uint64    `json:"projectID"`
		Arg1 *Cycle    `json:"cycle"`
		Arg2 time.Time `json:"now"`
	}{projectID, cycle, now}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[15], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) ClearUsage(ctx context.Context, projectID uint64, now time.Time) (bool, error) {
	in := struct {
		Arg0 uint64    `json:"projectID"`
		Arg1 time.Time `json:"now"`
	}{projectID, now}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[16], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) NotifyEvent(ctx context.Context, projectID uint64, eventType EventType) (bool, error) {
	in := struct {
		Arg0 uint64    `json:"projectID"`
		Arg1 EventType `json:"eventType"`
	}{projectID, eventType}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[17], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) UpdateProjectUsage(ctx context.Context, service Service, now time.Time, usage map[uint64]*AccessUsage) (map[uint64]bool, error) {
	in := struct {
		Arg0 Service                 `json:"service"`
		Arg1 time.Time               `json:"now"`
		Arg2 map[uint64]*AccessUsage `json:"usage"`
	}{service, now, usage}
	out := struct {
		Ret0 map[uint64]bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[18], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) UpdateKeyUsage(ctx context.Context, service Service, now time.Time, usage map[string]*AccessUsage) (map[string]bool, error) {
	in := struct {
		Arg0 Service                 `json:"service"`
		Arg1 time.Time               `json:"now"`
		Arg2 map[string]*AccessUsage `json:"usage"`
	}{service, now, usage}
	out := struct {
		Ret0 map[string]bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[19], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) UpdateUsage(ctx context.Context, service Service, now time.Time, usage map[string]*AccessUsage) (map[string]bool, error) {
	in := struct {
		Arg0 Service                 `json:"service"`
		Arg1 time.Time               `json:"now"`
		Arg2 map[string]*AccessUsage `json:"usage"`
	}{service, now, usage}
	out := struct {
		Ret0 map[string]bool `json:"ok"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[20], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, err
}

func (c *quotaControlClient) GetUserPermission(ctx context.Context, projectId uint64, userId string) (UserPermission, *ResourceAccess, error) {
	in := struct {
		Arg0 uint64 `json:"projectId"`
		Arg1 string `json:"userId"`
	}{projectId, userId}
	out := struct {
		Ret0 UserPermission  `json:"permission"`
		Ret1 *ResourceAccess `json:"resourceAccess"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[21], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to close response body: %w", cerr))
		}
	}

	return out.Ret0, out.Ret1, err
}

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequestWithContext(ctx, "POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

// doHTTPRequest is common code to make a request to the remote service.
func doHTTPRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) (*http.Response, error) {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("failed to marshal JSON body: %w", err))
	}
	if err = ctx.Err(); err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("aborted because context was done: %w", err))
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(fmt.Errorf("could not build request: %w", err))
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(err)
	}

	if resp.StatusCode != 200 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to read server error response body: %w", err))
		}

		var rpcErr WebRPCError
		if err := json.Unmarshal(respBody, &rpcErr); err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to unmarshal server error: %w", err))
		}
		if rpcErr.Cause != "" {
			rpcErr.cause = errors.New(rpcErr.Cause)
		}
		return nil, rpcErr
	}

	if out != nil {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to read response body: %w", err))
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCause(fmt.Errorf("failed to unmarshal JSON response body: %w", err))
		}
	}

	return resp, nil
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Helpers
//

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}
	HTTPRequestCtxKey              = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)

func ServiceNameFromContext(ctx context.Context) string {
	service, _ := ctx.Value(ServiceNameCtxKey).(string)
	return service
}

func MethodNameFromContext(ctx context.Context) string {
	method, _ := ctx.Value(MethodNameCtxKey).(string)
	return method
}

func RequestFromContext(ctx context.Context) *http.Request {
	r, _ := ctx.Value(HTTPRequestCtxKey).(*http.Request)
	return r
}

//
// Errors
//

type WebRPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"msg"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"status"`
	cause      error
}

var _ error = WebRPCError{}

func (e WebRPCError) Error() string {
	if e.cause != nil {
		return fmt.Sprintf("%s %d: %s: %v", e.Name, e.Code, e.Message, e.cause)
	}
	return fmt.Sprintf("%s %d: %s", e.Name, e.Code, e.Message)
}

func (e WebRPCError) Is(target error) bool {
	if target == nil {
		return false
	}
	if rpcErr, ok := target.(WebRPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e WebRPCError) Unwrap() error {
	return e.cause
}

func (e WebRPCError) WithCause(cause error) WebRPCError {
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

func (e WebRPCError) WithCausef(format string, args ...interface{}) WebRPCError {
	cause := fmt.Errorf(format, args...)
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Deprecated: Use .WithCause() method on WebRPCError.
func ErrorWithCause(rpcErr WebRPCError, cause error) WebRPCError {
	return rpcErr.WithCause(cause)
}

// Webrpc errors
var (
	ErrWebrpcEndpoint           = WebRPCError{Code: 0, Name: "WebrpcEndpoint", Message: "endpoint error", HTTPStatus: 400}
	ErrWebrpcRequestFailed      = WebRPCError{Code: -1, Name: "WebrpcRequestFailed", Message: "request failed", HTTPStatus: 400}
	ErrWebrpcBadRoute           = WebRPCError{Code: -2, Name: "WebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadMethod          = WebRPCError{Code: -3, Name: "WebrpcBadMethod", Message: "bad method", HTTPStatus: 405}
	ErrWebrpcBadRequest         = WebRPCError{Code: -4, Name: "WebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse        = WebRPCError{Code: -5, Name: "WebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
	ErrWebrpcServerPanic        = WebRPCError{Code: -6, Name: "WebrpcServerPanic", Message: "server panic", HTTPStatus: 500}
	ErrWebrpcInternalError      = WebRPCError{Code: -7, Name: "WebrpcInternalError", Message: "internal error", HTTPStatus: 500}
	ErrWebrpcClientDisconnected = WebRPCError{Code: -8, Name: "WebrpcClientDisconnected", Message: "client disconnected", HTTPStatus: 400}
	ErrWebrpcStreamLost         = WebRPCError{Code: -9, Name: "WebrpcStreamLost", Message: "stream lost", HTTPStatus: 400}
	ErrWebrpcStreamFinished     = WebRPCError{Code: -10, Name: "WebrpcStreamFinished", Message: "stream finished", HTTPStatus: 200}
)

// Schema errors
var (
	ErrUnauthorized      = WebRPCError{Code: 1, Name: "Unauthorized", Message: "Unauthorized access", HTTPStatus: 401}
	ErrPermissionDenied  = WebRPCError{Code: 2, Name: "PermissionDenied", Message: "Permission denied", HTTPStatus: 403}
	ErrSessionExpired    = WebRPCError{Code: 3, Name: "SessionExpired", Message: "Session expired", HTTPStatus: 403}
	ErrTimeout           = WebRPCError{Code: 1001, Name: "Timeout", Message: "Request timed out", HTTPStatus: 408}
	ErrLimitExceeded     = WebRPCError{Code: 1002, Name: "LimitExceeded", Message: "Request limit exceeded", HTTPStatus: 429}
	ErrInvalidOrigin     = WebRPCError{Code: 1003, Name: "InvalidOrigin", Message: "Invalid origin", HTTPStatus: 403}
	ErrInvalidService    = WebRPCError{Code: 1004, Name: "InvalidService", Message: "Access key is not configured for this service", HTTPStatus: 403}
	ErrAccessKeyNotFound = WebRPCError{Code: 1005, Name: "AccessKeyNotFound", Message: "Access key not found", HTTPStatus: 401}
	ErrUnauthorizedUser  = WebRPCError{Code: 1006, Name: "UnauthorizedUser", Message: "Unauthorized user", HTTPStatus: 403}
	ErrMaxAccessKeys     = WebRPCError{Code: 1007, Name: "MaxAccessKeys", Message: "Access keys limit reached", HTTPStatus: 403}
	ErrNoDefaultKey      = WebRPCError{Code: 1008, Name: "NoDefaultKey", Message: "No default access key found", HTTPStatus: 403}
	ErrAtLeastOneKey     = WebRPCError{Code: 1009, Name: "AtLeastOneKey", Message: "There should be at least one active accessKey per project", HTTPStatus: 403}
	ErrAccessKeyMismatch = WebRPCError{Code: 1010, Name: "AccessKeyMismatch", Message: "Access key does not belong to the project", HTTPStatus: 403}
	ErrProjectNotFound   = WebRPCError{Code: 1011, Name: "ProjectNotFound", Message: "Project not found", HTTPStatus: 401}
)
