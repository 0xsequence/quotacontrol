// quota-control v0.1.0 38f778d4e99379e16caefb2109523359b47a04ee
// --
// Code generated by webrpc-gen@v0.13.0-dev with golang@v0.13.0 generator. DO NOT EDIT.
//
// webrpc-gen -schema=proto.ridl -target=golang@v0.13.0 -pkg=proto -server -client -out=./proto.gen.go
package proto

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v0.1.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "38f778d4e99379e16caefb2109523359b47a04ee"
}

//
// Types
//

type Service uint16

const (
	Service_NodeGateway Service = 0
	Service_API         Service = 1
	Service_Indexer     Service = 2
	Service_Relayer     Service = 3
	Service_Metadata    Service = 4
)

var Service_name = map[uint16]string{
	0: "NodeGateway",
	1: "API",
	2: "Indexer",
	3: "Relayer",
	4: "Metadata",
}

var Service_value = map[string]uint16{
	"NodeGateway": 0,
	"API":         1,
	"Indexer":     2,
	"Relayer":     3,
	"Metadata":    4,
}

func (x Service) String() string {
	return Service_name[uint16(x)]
}

func (x Service) MarshalText() ([]byte, error) {
	return []byte(Service_name[uint16(x)]), nil
}

func (x *Service) UnmarshalText(b []byte) error {
	*x = Service(Service_value[string(b)])
	return nil
}

type EventType uint16

const (
	EventType_FreeCU    EventType = 0
	EventType_SoftQuota EventType = 1
	EventType_HardQuota EventType = 2
)

var EventType_name = map[uint16]string{
	0: "FreeCU",
	1: "SoftQuota",
	2: "HardQuota",
}

var EventType_value = map[string]uint16{
	"FreeCU":    0,
	"SoftQuota": 1,
	"HardQuota": 2,
}

func (x EventType) String() string {
	return EventType_name[uint16(x)]
}

func (x EventType) MarshalText() ([]byte, error) {
	return []byte(EventType_name[uint16(x)]), nil
}

func (x *EventType) UnmarshalText(b []byte) error {
	*x = EventType(EventType_value[string(b)])
	return nil
}

type UserPermission uint16

const (
	UserPermission_UNAUTHORIZED UserPermission = 0
	UserPermission_READ         UserPermission = 1
	UserPermission_READ_WRITE   UserPermission = 2
	UserPermission_ADMIN        UserPermission = 3
)

var UserPermission_name = map[uint16]string{
	0: "UNAUTHORIZED",
	1: "READ",
	2: "READ_WRITE",
	3: "ADMIN",
}

var UserPermission_value = map[string]uint16{
	"UNAUTHORIZED": 0,
	"READ":         1,
	"READ_WRITE":   2,
	"ADMIN":        3,
}

func (x UserPermission) String() string {
	return UserPermission_name[uint16(x)]
}

func (x UserPermission) MarshalText() ([]byte, error) {
	return []byte(UserPermission_name[uint16(x)]), nil
}

func (x *UserPermission) UnmarshalText(b []byte) error {
	*x = UserPermission(UserPermission_value[string(b)])
	return nil
}

type Limit struct {
	MaxKeys   int64 `json:"maxKeys,omitempty"`
	RateLimit int64 `json:"rateLimit"`
	FreeCU    int64 `json:"freeCU"`
	SoftQuota int64 `json:"softQuota"`
	HardQuota int64 `json:"hardQuota"`
}

type AccessKey struct {
	ProjectID       uint64     `json:"projectId" db:"project_id"`
	DisplayName     string     `json:"displayName" db:"display_name"`
	AccessKey       string     `json:"accessKey" db:"access_key"`
	Active          bool       `json:"active" db:"active"`
	Default         bool       `json:"default" db:"is_default"`
	AllowedOrigins  []string   `json:"allowedOrigins" db:"allowed_origins"`
	AllowedServices []*Service `json:"allowedServices" db:"allowed_services"`
	CreatedAt       *time.Time `json:"createdAt,omitempty" db:"created_at,omitempty"`
}

type AccessUsage struct {
	ValidCompute   int64 `json:"validCompute" db:"valid_compute"`
	OverCompute    int64 `json:"overCompute" db:"over_compute"`
	LimitedCompute int64 `json:"limitedCompute" db:"limited_compute"`
}

type Cycle struct {
	Start time.Time `json:"start"`
	End   time.Time `json:"end"`
}

type AccessQuota struct {
	Cycle     *Cycle     `json:"cycle"`
	Limit     *Limit     `json:"limit"`
	AccessKey *AccessKey `json:"accessKey"`
}

type QuotaControl interface {
	GetAccessLimit(ctx context.Context, projectId uint64) (*Limit, error)
	SetAccessLimit(ctx context.Context, projectId uint64, limit *Limit) (bool, error)
	GetAccessKey(ctx context.Context, accessKey string) (*AccessKey, error)
	GetDefaultAccessKey(ctx context.Context, projectID uint64) (*AccessKey, error)
	CreateAccessKey(ctx context.Context, projectId uint64, displayName string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error)
	RotateAccessKey(ctx context.Context, accessKey string) (*AccessKey, error)
	UpdateAccessKey(ctx context.Context, accessKey string, displayName *string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error)
	UpdateDefaultAccessKey(ctx context.Context, projectID uint64, accessKey string) (bool, error)
	ListAccessKeys(ctx context.Context, projectId uint64, active *bool, service *Service) ([]*AccessKey, error)
	DisableAccessKey(ctx context.Context, accessKey string) (bool, error)
	GetAccessQuota(ctx context.Context, accessKey string) (*AccessQuota, error)
	GetAccountUsage(ctx context.Context, projectID uint64, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error)
	GetAccessKeyUsage(ctx context.Context, accessKey string, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error)
	PrepareUsage(ctx context.Context, projectID uint64, now time.Time) (bool, error)
	NotifyEvent(ctx context.Context, projectID uint64, eventType *EventType) (bool, error)
	UpdateUsage(ctx context.Context, service *Service, now time.Time, usage map[string]*AccessUsage) (map[string]bool, error)
	GetUserPermission(ctx context.Context, projectId uint64, userId string) (*UserPermission, map[string]interface{}, error)
}

var WebRPCServices = map[string][]string{
	"QuotaControl": {
		"GetAccessLimit",
		"SetAccessLimit",
		"GetAccessKey",
		"GetDefaultAccessKey",
		"CreateAccessKey",
		"RotateAccessKey",
		"UpdateAccessKey",
		"UpdateDefaultAccessKey",
		"ListAccessKeys",
		"DisableAccessKey",
		"GetAccessQuota",
		"GetAccountUsage",
		"GetAccessKeyUsage",
		"PrepareUsage",
		"NotifyEvent",
		"UpdateUsage",
		"GetUserPermission",
	},
}

//
// Server
//

type WebRPCServer interface {
	http.Handler
}

type quotaControlServer struct {
	QuotaControl
}

func NewQuotaControlServer(svc QuotaControl) WebRPCServer {
	return &quotaControlServer{
		QuotaControl: svc,
	}
}

func (s *quotaControlServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "QuotaControl")

	if r.Method != "POST" {
		err := ErrorWithCause(ErrWebrpcBadMethod, fmt.Errorf("unsupported method %q (only POST is allowed)", r.Method))
		RespondWithError(w, err)
		return
	}

	switch r.URL.Path {
	case "/rpc/QuotaControl/GetAccessLimit":
		s.serveGetAccessLimit(ctx, w, r)
		return
	case "/rpc/QuotaControl/SetAccessLimit":
		s.serveSetAccessLimit(ctx, w, r)
		return
	case "/rpc/QuotaControl/GetAccessKey":
		s.serveGetAccessKey(ctx, w, r)
		return
	case "/rpc/QuotaControl/GetDefaultAccessKey":
		s.serveGetDefaultAccessKey(ctx, w, r)
		return
	case "/rpc/QuotaControl/CreateAccessKey":
		s.serveCreateAccessKey(ctx, w, r)
		return
	case "/rpc/QuotaControl/RotateAccessKey":
		s.serveRotateAccessKey(ctx, w, r)
		return
	case "/rpc/QuotaControl/UpdateAccessKey":
		s.serveUpdateAccessKey(ctx, w, r)
		return
	case "/rpc/QuotaControl/UpdateDefaultAccessKey":
		s.serveUpdateDefaultAccessKey(ctx, w, r)
		return
	case "/rpc/QuotaControl/ListAccessKeys":
		s.serveListAccessKeys(ctx, w, r)
		return
	case "/rpc/QuotaControl/DisableAccessKey":
		s.serveDisableAccessKey(ctx, w, r)
		return
	case "/rpc/QuotaControl/GetAccessQuota":
		s.serveGetAccessQuota(ctx, w, r)
		return
	case "/rpc/QuotaControl/GetAccountUsage":
		s.serveGetAccountUsage(ctx, w, r)
		return
	case "/rpc/QuotaControl/GetAccessKeyUsage":
		s.serveGetAccessKeyUsage(ctx, w, r)
		return
	case "/rpc/QuotaControl/PrepareUsage":
		s.servePrepareUsage(ctx, w, r)
		return
	case "/rpc/QuotaControl/NotifyEvent":
		s.serveNotifyEvent(ctx, w, r)
		return
	case "/rpc/QuotaControl/UpdateUsage":
		s.serveUpdateUsage(ctx, w, r)
		return
	case "/rpc/QuotaControl/GetUserPermission":
		s.serveGetUserPermission(ctx, w, r)
		return
	default:
		err := ErrorWithCause(ErrWebrpcBadRoute, fmt.Errorf("no handler for path %q", r.URL.Path))
		RespondWithError(w, err)
		return
	}
}

func (s *quotaControlServer) serveGetAccessLimit(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAccessLimitJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveGetAccessLimitJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAccessLimit")
	reqContent := struct {
		Arg0 uint64 `json:"projectId"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *Limit
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.GetAccessLimit(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *Limit `json:"limit"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveSetAccessLimit(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSetAccessLimitJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveSetAccessLimitJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SetAccessLimit")
	reqContent := struct {
		Arg0 uint64 `json:"projectId"`
		Arg1 *Limit `json:"limit"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.SetAccessLimit(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 bool `json:"ok"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveGetAccessKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAccessKeyJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveGetAccessKeyJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAccessKey")
	reqContent := struct {
		Arg0 string `json:"accessKey"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *AccessKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.GetAccessKey(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveGetDefaultAccessKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetDefaultAccessKeyJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveGetDefaultAccessKeyJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetDefaultAccessKey")
	reqContent := struct {
		Arg0 uint64 `json:"projectID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *AccessKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.GetDefaultAccessKey(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveCreateAccessKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateAccessKeyJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveCreateAccessKeyJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CreateAccessKey")
	reqContent := struct {
		Arg0 uint64     `json:"projectId"`
		Arg1 string     `json:"displayName"`
		Arg2 []string   `json:"allowedOrigins"`
		Arg3 []*Service `json:"allowedServices"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *AccessKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.CreateAccessKey(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2, reqContent.Arg3)
	}()
	respContent := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveRotateAccessKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRotateAccessKeyJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveRotateAccessKeyJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RotateAccessKey")
	reqContent := struct {
		Arg0 string `json:"accessKey"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *AccessKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.RotateAccessKey(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveUpdateAccessKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateAccessKeyJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveUpdateAccessKeyJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateAccessKey")
	reqContent := struct {
		Arg0 string     `json:"accessKey"`
		Arg1 *string    `json:"displayName"`
		Arg2 []string   `json:"allowedOrigins"`
		Arg3 []*Service `json:"allowedServices"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *AccessKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.UpdateAccessKey(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2, reqContent.Arg3)
	}()
	respContent := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveUpdateDefaultAccessKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateDefaultAccessKeyJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveUpdateDefaultAccessKeyJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateDefaultAccessKey")
	reqContent := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 string `json:"accessKey"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.UpdateDefaultAccessKey(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 bool `json:"ok"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveListAccessKeys(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListAccessKeysJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveListAccessKeysJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ListAccessKeys")
	reqContent := struct {
		Arg0 uint64   `json:"projectId"`
		Arg1 *bool    `json:"active"`
		Arg2 *Service `json:"service"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 []*AccessKey
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.ListAccessKeys(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2)
	}()
	respContent := struct {
		Ret0 []*AccessKey `json:"accessKeys"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveDisableAccessKey(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDisableAccessKeyJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveDisableAccessKeyJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "DisableAccessKey")
	reqContent := struct {
		Arg0 string `json:"accessKey"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.DisableAccessKey(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 bool `json:"ok"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveGetAccessQuota(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAccessQuotaJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveGetAccessQuotaJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAccessQuota")
	reqContent := struct {
		Arg0 string `json:"accessKey"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *AccessQuota
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.GetAccessQuota(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *AccessQuota `json:"accessQuota"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveGetAccountUsage(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAccountUsageJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveGetAccountUsageJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAccountUsage")
	reqContent := struct {
		Arg0 uint64     `json:"projectID"`
		Arg1 *Service   `json:"service"`
		Arg2 *time.Time `json:"from"`
		Arg3 *time.Time `json:"to"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *AccessUsage
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.GetAccountUsage(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2, reqContent.Arg3)
	}()
	respContent := struct {
		Ret0 *AccessUsage `json:"usage"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveGetAccessKeyUsage(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAccessKeyUsageJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveGetAccessKeyUsageJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAccessKeyUsage")
	reqContent := struct {
		Arg0 string     `json:"accessKey"`
		Arg1 *Service   `json:"service"`
		Arg2 *time.Time `json:"from"`
		Arg3 *time.Time `json:"to"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *AccessUsage
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.GetAccessKeyUsage(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2, reqContent.Arg3)
	}()
	respContent := struct {
		Ret0 *AccessUsage `json:"usage"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) servePrepareUsage(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePrepareUsageJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) servePrepareUsageJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "PrepareUsage")
	reqContent := struct {
		Arg0 uint64    `json:"projectID"`
		Arg1 time.Time `json:"now"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.PrepareUsage(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 bool `json:"ok"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveNotifyEvent(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveNotifyEventJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveNotifyEventJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "NotifyEvent")
	reqContent := struct {
		Arg0 uint64     `json:"projectID"`
		Arg1 *EventType `json:"eventType"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.NotifyEvent(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 bool `json:"ok"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveUpdateUsage(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateUsageJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveUpdateUsageJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateUsage")
	reqContent := struct {
		Arg0 *Service                `json:"service"`
		Arg1 time.Time               `json:"now"`
		Arg2 map[string]*AccessUsage `json:"usage"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 map[string]bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, err = s.QuotaControl.UpdateUsage(ctx, reqContent.Arg0, reqContent.Arg1, reqContent.Arg2)
	}()
	respContent := struct {
		Ret0 map[string]bool `json:"ok"`
	}{ret0}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *quotaControlServer) serveGetUserPermission(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserPermissionJSON(ctx, w, r)
	default:
		err := ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("unexpected Content-Type: %q", r.Header.Get("Content-Type")))
		RespondWithError(w, err)
	}
}

func (s *quotaControlServer) serveGetUserPermissionJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetUserPermission")
	reqContent := struct {
		Arg0 uint64 `json:"projectId"`
		Arg1 string `json:"userId"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to read request data: %w", err))
		RespondWithError(w, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadRequest, fmt.Errorf("failed to unmarshal request data: %w", err))
		RespondWithError(w, err)
		return
	}

	// Call service method
	var ret0 *UserPermission
	var ret1 map[string]interface{}
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				RespondWithError(w, ErrorWithCause(ErrWebrpcServerPanic, fmt.Errorf("%v", rr)))
				panic(rr)
			}
		}()
		ret0, ret1, err = s.QuotaControl.GetUserPermission(ctx, reqContent.Arg0, reqContent.Arg1)
	}()
	respContent := struct {
		Ret0 *UserPermission        `json:"permission"`
		Ret1 map[string]interface{} `json:"resourceAccess"`
	}{ret0, ret1}

	if err != nil {
		RespondWithError(w, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to marshal json response: %w", err))
		RespondWithError(w, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func RespondWithError(w http.ResponseWriter, err error) {
	rpcErr, ok := err.(WebRPCError)
	if !ok {
		rpcErr = ErrorWithCause(ErrWebrpcEndpoint, err)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

//
// Client
//

const QuotaControlPathPrefix = "/rpc/QuotaControl/"

type quotaControlClient struct {
	client HTTPClient
	urls   [17]string
}

func NewQuotaControlClient(addr string, client HTTPClient) QuotaControl {
	prefix := urlBase(addr) + QuotaControlPathPrefix
	urls := [17]string{
		prefix + "GetAccessLimit",
		prefix + "SetAccessLimit",
		prefix + "GetAccessKey",
		prefix + "GetDefaultAccessKey",
		prefix + "CreateAccessKey",
		prefix + "RotateAccessKey",
		prefix + "UpdateAccessKey",
		prefix + "UpdateDefaultAccessKey",
		prefix + "ListAccessKeys",
		prefix + "DisableAccessKey",
		prefix + "GetAccessQuota",
		prefix + "GetAccountUsage",
		prefix + "GetAccessKeyUsage",
		prefix + "PrepareUsage",
		prefix + "NotifyEvent",
		prefix + "UpdateUsage",
		prefix + "GetUserPermission",
	}
	return &quotaControlClient{
		client: client,
		urls:   urls,
	}
}

func (c *quotaControlClient) GetAccessLimit(ctx context.Context, projectId uint64) (*Limit, error) {
	in := struct {
		Arg0 uint64 `json:"projectId"`
	}{projectId}
	out := struct {
		Ret0 *Limit `json:"limit"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[0], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) SetAccessLimit(ctx context.Context, projectId uint64, limit *Limit) (bool, error) {
	in := struct {
		Arg0 uint64 `json:"projectId"`
		Arg1 *Limit `json:"limit"`
	}{projectId, limit}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[1], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) GetAccessKey(ctx context.Context, accessKey string) (*AccessKey, error) {
	in := struct {
		Arg0 string `json:"accessKey"`
	}{accessKey}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[2], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) GetDefaultAccessKey(ctx context.Context, projectID uint64) (*AccessKey, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
	}{projectID}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[3], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) CreateAccessKey(ctx context.Context, projectId uint64, displayName string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error) {
	in := struct {
		Arg0 uint64     `json:"projectId"`
		Arg1 string     `json:"displayName"`
		Arg2 []string   `json:"allowedOrigins"`
		Arg3 []*Service `json:"allowedServices"`
	}{projectId, displayName, allowedOrigins, allowedServices}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[4], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) RotateAccessKey(ctx context.Context, accessKey string) (*AccessKey, error) {
	in := struct {
		Arg0 string `json:"accessKey"`
	}{accessKey}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[5], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) UpdateAccessKey(ctx context.Context, accessKey string, displayName *string, allowedOrigins []string, allowedServices []*Service) (*AccessKey, error) {
	in := struct {
		Arg0 string     `json:"accessKey"`
		Arg1 *string    `json:"displayName"`
		Arg2 []string   `json:"allowedOrigins"`
		Arg3 []*Service `json:"allowedServices"`
	}{accessKey, displayName, allowedOrigins, allowedServices}
	out := struct {
		Ret0 *AccessKey `json:"accessKey"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[6], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) UpdateDefaultAccessKey(ctx context.Context, projectID uint64, accessKey string) (bool, error) {
	in := struct {
		Arg0 uint64 `json:"projectID"`
		Arg1 string `json:"accessKey"`
	}{projectID, accessKey}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[7], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) ListAccessKeys(ctx context.Context, projectId uint64, active *bool, service *Service) ([]*AccessKey, error) {
	in := struct {
		Arg0 uint64   `json:"projectId"`
		Arg1 *bool    `json:"active"`
		Arg2 *Service `json:"service"`
	}{projectId, active, service}
	out := struct {
		Ret0 []*AccessKey `json:"accessKeys"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[8], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) DisableAccessKey(ctx context.Context, accessKey string) (bool, error) {
	in := struct {
		Arg0 string `json:"accessKey"`
	}{accessKey}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[9], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) GetAccessQuota(ctx context.Context, accessKey string) (*AccessQuota, error) {
	in := struct {
		Arg0 string `json:"accessKey"`
	}{accessKey}
	out := struct {
		Ret0 *AccessQuota `json:"accessQuota"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[10], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) GetAccountUsage(ctx context.Context, projectID uint64, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error) {
	in := struct {
		Arg0 uint64     `json:"projectID"`
		Arg1 *Service   `json:"service"`
		Arg2 *time.Time `json:"from"`
		Arg3 *time.Time `json:"to"`
	}{projectID, service, from, to}
	out := struct {
		Ret0 *AccessUsage `json:"usage"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[11], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) GetAccessKeyUsage(ctx context.Context, accessKey string, service *Service, from *time.Time, to *time.Time) (*AccessUsage, error) {
	in := struct {
		Arg0 string     `json:"accessKey"`
		Arg1 *Service   `json:"service"`
		Arg2 *time.Time `json:"from"`
		Arg3 *time.Time `json:"to"`
	}{accessKey, service, from, to}
	out := struct {
		Ret0 *AccessUsage `json:"usage"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[12], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) PrepareUsage(ctx context.Context, projectID uint64, now time.Time) (bool, error) {
	in := struct {
		Arg0 uint64    `json:"projectID"`
		Arg1 time.Time `json:"now"`
	}{projectID, now}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[13], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) NotifyEvent(ctx context.Context, projectID uint64, eventType *EventType) (bool, error) {
	in := struct {
		Arg0 uint64     `json:"projectID"`
		Arg1 *EventType `json:"eventType"`
	}{projectID, eventType}
	out := struct {
		Ret0 bool `json:"ok"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[14], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) UpdateUsage(ctx context.Context, service *Service, now time.Time, usage map[string]*AccessUsage) (map[string]bool, error) {
	in := struct {
		Arg0 *Service                `json:"service"`
		Arg1 time.Time               `json:"now"`
		Arg2 map[string]*AccessUsage `json:"usage"`
	}{service, now, usage}
	out := struct {
		Ret0 map[string]bool `json:"ok"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[15], in, &out)
	return out.Ret0, err
}

func (c *quotaControlClient) GetUserPermission(ctx context.Context, projectId uint64, userId string) (*UserPermission, map[string]interface{}, error) {
	in := struct {
		Arg0 uint64 `json:"projectId"`
		Arg1 string `json:"userId"`
	}{projectId, userId}
	out := struct {
		Ret0 *UserPermission        `json:"permission"`
		Ret1 map[string]interface{} `json:"resourceAccess"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[16], in, &out)
	return out.Ret0, out.Ret1, err
}

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

// doJSONRequest is common code to make a request to the remote service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) error {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return ErrorWithCause(ErrWebrpcRequestFailed, fmt.Errorf("failed to marshal JSON body: %w", err))
	}
	if err = ctx.Err(); err != nil {
		return ErrorWithCause(ErrWebrpcRequestFailed, fmt.Errorf("aborted because context was done: %w", err))
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return ErrorWithCause(ErrWebrpcRequestFailed, fmt.Errorf("could not build request: %w", err))
	}
	resp, err := client.Do(req)
	if err != nil {
		return ErrorWithCause(ErrWebrpcRequestFailed, err)
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrorWithCause(ErrWebrpcRequestFailed, fmt.Errorf("failed to close response body: %w", cerr))
		}
	}()

	if err = ctx.Err(); err != nil {
		return ErrorWithCause(ErrWebrpcRequestFailed, fmt.Errorf("aborted because context was done: %w", err))
	}

	if resp.StatusCode != 200 {
		respBody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to read server error response body: %w", err))
		}

		var rpcErr WebRPCError
		if err := json.Unmarshal(respBody, &rpcErr); err != nil {
			return ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to unmarshal server error: %w", err))
		}
		if rpcErr.Cause != "" {
			rpcErr.cause = errors.New(rpcErr.Cause)
		}
		return rpcErr
	}

	if out != nil {
		respBody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to read response body: %w", err))
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return ErrorWithCause(ErrWebrpcBadResponse, fmt.Errorf("failed to unmarshal JSON response body: %w", err))
		}
	}

	return nil
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Helpers
//

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	// For Client
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}

	// For Server
	HTTPResponseWriterCtxKey = &contextKey{"HTTPResponseWriter"}

	HTTPRequestCtxKey = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)

//
// Errors
//

type WebRPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"msg"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"status"`
	cause      error
}

var _ error = WebRPCError{}

func (e WebRPCError) Error() string {
	if e.cause != nil {
		return fmt.Sprintf("%s %d: %s: %v", e.Name, e.Code, e.Message, e.cause)
	}
	return fmt.Sprintf("%s %d: %s", e.Name, e.Code, e.Message)
}

func (e WebRPCError) Is(target error) bool {
	if rpcErr, ok := target.(WebRPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e WebRPCError) Unwrap() error {
	return e.cause
}

func ErrorWithCause(rpcErr WebRPCError, cause error) WebRPCError {
	err := rpcErr
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Webrpc errors
var (
	ErrWebrpcEndpoint      = WebRPCError{Code: 0, Name: "WebrpcEndpoint", Message: "endpoint error", HTTPStatus: 400}
	ErrWebrpcRequestFailed = WebRPCError{Code: -1, Name: "WebrpcRequestFailed", Message: "request failed", HTTPStatus: 400}
	ErrWebrpcBadRoute      = WebRPCError{Code: -2, Name: "WebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadMethod     = WebRPCError{Code: -3, Name: "WebrpcBadMethod", Message: "bad method", HTTPStatus: 405}
	ErrWebrpcBadRequest    = WebRPCError{Code: -4, Name: "WebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse   = WebRPCError{Code: -5, Name: "WebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
	ErrWebrpcServerPanic   = WebRPCError{Code: -6, Name: "WebrpcServerPanic", Message: "server panic", HTTPStatus: 500}
	ErrWebrpcInternalError = WebRPCError{Code: -7, Name: "WebrpcInternalError", Message: "internal error", HTTPStatus: 500}
)

// Schema errors
var (
	ErrTimeout           = WebRPCError{Code: 1001, Name: "Timeout", Message: "Request timed out", HTTPStatus: 408}
	ErrLimitExceeded     = WebRPCError{Code: 1002, Name: "LimitExceeded", Message: "Request limit exceeded", HTTPStatus: 429}
	ErrInvalidOrigin     = WebRPCError{Code: 1003, Name: "InvalidOrigin", Message: "Invalid origin", HTTPStatus: 403}
	ErrInvalidService    = WebRPCError{Code: 1004, Name: "InvalidService", Message: "Invalid service", HTTPStatus: 403}
	ErrAccessKeyNotFound = WebRPCError{Code: 1005, Name: "AccessKeyNotFound", Message: "Access key not found", HTTPStatus: 401}
	ErrUnauthorizedUser  = WebRPCError{Code: 1006, Name: "UnauthorizedUser", Message: "Unauthorized user", HTTPStatus: 403}
	ErrMaxAccessKeys     = WebRPCError{Code: 1007, Name: "MaxAccessKeys", Message: "Access keys limit reached", HTTPStatus: 403}
	ErrNoDefaultKey      = WebRPCError{Code: 1008, Name: "NoDefaultKey", Message: "No default access key found", HTTPStatus: 403}
	ErrAtLeastOneKey     = WebRPCError{Code: 1009, Name: "AtLeastOneKey", Message: "There should be at least one active accessKey per project", HTTPStatus: 403}
)
