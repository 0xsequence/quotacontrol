webrpc = v1

name = quota-control
version = v0.19.2

enum Service: uint16
  - NodeGateway
  - API
  - Indexer
  - Relayer
  - Metadata
  - Marketplace
  - Builder
  - WaaS

# LimitSettings is used to define the limits for a project.
struct Limit
  # The service-specific limits for the project.
  - serviceLimit: map<string,ServiceLimit>
    + go.field.type = map[Service]ServiceLimit
  # Deprecated: use base.rateLimit instead
  - rateLimit: int64
  # Deprecated: use base.freeWarn instead
  - freeWarn: int64
  # Deprecated: use base.freeMax instead
  - freeMax: int64
  # Deprecated: use base.overWarn instead
  - overWarn: int64
  # Deprecated: use base.overMax instead
  - overMax: int64

# ServiceLimit defines the limits for a service.
struct ServiceLimit
  # Requests/minute limit for the project.
  - rateLimit: int64
  # Free usage warning threshold.
  - freeWarn: int64
  # Free usage maximum threshold.
  - freeMax: int64
  # Over usage warning threshold.
  - overWarn: int64
  # Over usage maximum threshold.
  - overMax: int64

struct AccessKey
  - projectId: uint64
    + go.field.name = ProjectID
    + go.tag.db = project_id
  - chainIds: []uint64
    + go.field.name = ChainIDs
    + go.tag.db = chain_ids
  - displayName: string
    + go.tag.db = display_name
  - accessKey: string
    + go.tag.db = access_key
  - active: bool
    + go.tag.db = active
  - default: bool
    + go.tag.db = is_default
  - requireOrigin: bool
    + go.tag.db = require_origin
  - allowedOrigins: []string
    + go.field.type = validation.Origins
    + go.tag.db = allowed_origins
  - allowedServices: []Service
    + go.tag.db = allowed_services
  - createdAt?: timestamp
    + go.tag.json = createdAt,omitempty
    + go.tag.db = created_at,omitempty

# Deprecated: use int64 instead
struct AccessUsage
  - validCompute: int64
    + go.tag.db = valid_compute
  - overCompute: int64
    + go.tag.db = over_compute
  - limitedCompute: int64
    + go.tag.db = limited_compute

struct Cycle
  - start: timestamp
  - end: timestamp

struct AccessQuota
  - cycle: Cycle
  - limit: Limit
  - accessKey: AccessKey

enum EventType: uint16
  - FreeWarn
  - FreeMax
  - OverWarn
  - OverMax

enum UserPermission: uint16
  - UNAUTHORIZED
  - READ
  - READ_WRITE
  - ADMIN

struct ProjectStatus
  - projectId: uint64
    + go.field.name = ProjectID
  - limit: Limit
  - usageCounter: map<string,int64>
  - rateLimitCounter: map<string,int64>

struct Subscription
  - tier: string

struct Minter
  - contracts: []string
    + go.field.type = []prototyp.Hash

struct ResourceAccess
  - projectId: uint64
    + go.field.name = ProjectID
  - subscription: Subscription
  - minter: Minter

import "authcontrol.errors.ridl"
import "quotacontrol.errors.ridl"

service QuotaControl
  # Status
  - GetProjectStatus(projectId: uint64) => (projectStatus: ProjectStatus)

  # Access Key
  - GetAccessKey(accessKey: string) => (accessKey: AccessKey)
  - CreateAccessKey(projectId: uint64, displayName: string, requireOrigin: bool, allowedOrigins: []string, allowedServices: []Service) => (accessKey: AccessKey)
  - UpdateAccessKey(accessKey: string, displayName?: string, requireOrigin?: bool, allowedOrigins?: []string, allowedServices?: []Service) => (accessKey: AccessKey)
  - ListAccessKeys(projectId: uint64, active?: bool, service?: Service) => (accessKeys: []AccessKey)
  - RotateAccessKey(accessKey: string) => (accessKey: AccessKey)
  - DisableAccessKey(accessKey: string) => (ok: bool)
  # Default Access Keys
  - GetDefaultAccessKey(projectID: uint64) => (accessKey: AccessKey)
  - SetDefaultAccessKey(projectID: uint64, accessKey: string) => (ok: bool)

  # Quota
  - GetProjectQuota(projectId: uint64, now: timestamp) => (accessQuota: AccessQuota)
  - GetAccessQuota(accessKey: string, now: timestamp) => (accessQuota: AccessQuota)
  - ClearAccessQuotaCache(projectID: uint64) => (ok: bool)

  # Usage
  - GetUsage(projectID: uint64, accessKey?: string, service?: Service, from?: timestamp, to?: timestamp) => (usage: int64)
  - PrepareUsage(projectID: uint64, service?: Service, cycle: Cycle, now: timestamp) => (ok: bool)
  - ClearUsage(projectID: uint64, service?: Service,now: timestamp) => (ok: bool)
  - SyncProjectUsage(service: Service, now: timestamp, usage: map<uint64,int64>) => (ok: map<uint64,bool>)
  - SyncAccessKeyUsage(service: Service, now: timestamp, usage: map<string,int64>) => (ok: map<string,bool>)
  - NotifyEvent(projectID: uint64, eventType: EventType) => (ok: bool)


  # Deprecated: use GetUsage
  - GetAccountUsage(projectID: uint64, service?: Service, from?: timestamp, to?: timestamp) => (usage: AccessUsage)
  # Deprecated: use GetUsage
  - GetAccessKeyUsage(accessKey: string, service?: Service, from?: timestamp, to?: timestamp) => (usage: AccessUsage)
  # Deprecated: use GetUsage
  - GetAsyncUsage(projectID: uint64, service?: Service, from?: timestamp, to?: timestamp) => (usage: AccessUsage)
  # Deprecated: use SyncProjectUsage
  - UpdateProjectUsage(service: Service, now: timestamp, usage: map<uint64,AccessUsage>) => (ok: map<uint64,bool>)
  # Deprecated: use SyncAccessKeyUsage
  - UpdateKeyUsage(service: Service, now: timestamp, usage: map<string,AccessUsage>) => (ok: map<string,bool>)

  # User permissions for a projectId
  - GetUserPermission(projectId: uint64, userId: string) => (permission: UserPermission, resourceAccess: ResourceAccess)

