webrpc = v1

name = quota-control
version = v0.17.1

enum Service: uint16
  - NodeGateway
  - API
  - Indexer
  - Relayer
  - Metadata
  - Marketplace
  - Builder
  - WaaS

struct Limit
  - maxKeys: int64
    + go.tag.json = maxKeys,omitempty
  - rateLimit: int64
  - freeWarn: int64
  - freeMax: int64
  - overWarn: int64
  - overMax: int64
  - blockTransactions: bool

struct AccessKey
  - projectId: uint64
    + go.field.name = ProjectID
    + go.tag.db = project_id
  - displayName: string
    + go.tag.db = display_name
  - accessKey: string
    + go.tag.db = access_key
  - active: bool
    + go.tag.db = active
  - default: bool
    + go.field.name = Default
    + go.tag.db = is_default
  - allowedOrigins: []string
    + go.field.type = validation.Origins
    + go.tag.db = allowed_origins
  - allowedServices: []Service
    + go.tag.db = allowed_services
  - createdAt?: timestamp
    + json = createdAt
    + go.tag.json = createdAt,omitempty
    + go.tag.db = created_at,omitempty

struct AccessUsage
  - validCompute: int64
    + go.tag.db = valid_compute
  - overCompute: int64
    + go.tag.db = over_compute
  - limitedCompute: int64
    + go.tag.db = limited_compute

struct Cycle
  - start: timestamp
  - end: timestamp

struct AccessQuota
  - cycle: Cycle
  - limit: Limit
  - accessKey: AccessKey

enum EventType: uint16
  - FreeWarn
  - FreeMax
  - OverWarn
  - OverMax

enum UserPermission: uint16
  - UNAUTHORIZED
  - READ
  - READ_WRITE
  - ADMIN

struct ProjectStatus
  - projectId: uint64
    + go.field.name = ProjectID
  - limit: Limit
  - usageCounter: int64
  - ratelimitCounter: int64

struct Subscription
  - tier: string

struct Minter
  - contracts: []string
    + go.field.type = []prototyp.Hash

struct ResourceAccess
  - projectId: uint64
    + go.field.name = ProjectID
  - subscription: Subscription
  - minter: Minter

# 1000-1099: AuthControl errors
error 1000 Unauthorized     "Unauthorized access"                 HTTP 401
error 1001 PermissionDenied "Permission denied"                   HTTP 403
error 1002 SessionExpired   "Session expired"                     HTTP 403
error 1003 MethodNotFound   "Method not found"                    HTTP 404
error 1004 RequestConflict  "Conflict with target resource"       HTTP 409
error 1005 Aborted          "Request aborted"                     HTTP 400
error 1006 Geoblocked       "Geoblocked region"                   HTTP 451
error 1007 RateLimited      "Rate-limited. Please slow down."     HTTP 429
# 1100-1199: AccessKey/Project errors
error 1100 ProjectNotFound   "Project not found"                  HTTP 401
error 1101 AccessKeyNotFound "Access key not found"               HTTP 401
error 1102 AccessKeyMismatch "Access key mismatch"                HTTP 409
error 1103 InvalidOrigin     "Invalid origin for Access Key"      HTTP 403
error 1104 InvalidService    "Service not enabled for Access key" HTTP 403
error 1105 UnauthorizedUser  "Unauthorized user"                  HTTP 403
# 1200-1299: Limit errors
error 1200 QuotaExceeded     "Quota request exceeded"             HTTP 429
error 1201 QuotaRateLimit    "Quota rate limit exceeded"          HTTP 429
# 1300-1399: Access Key management errors
error 1300 NoDefaultKey      "No default access key found"        HTTP 403
error 1301 MaxAccessKeys     "Access keys limit reached"          HTTP 403
error 1302 AtLeastOneKey     "You need at least one Access Key"   HTTP 403
# 1900-1999: Other errors
error 1900 Timeout           "Request timed out"                  HTTP 408

service QuotaControl
  # Project
  - GetProjectStatus(projectId: uint64) => (projectStatus: ProjectStatus)

  # Access Key
  - GetAccessKey(accessKey: string) => (accessKey: AccessKey)
  - GetDefaultAccessKey(projectID: uint64) => (accessKey: AccessKey)
  - CreateAccessKey(projectId: uint64, displayName: string, allowedOrigins: []string, allowedServices: []Service) => (accessKey: AccessKey)
  - RotateAccessKey(accessKey: string) => (accessKey: AccessKey)
  - UpdateAccessKey(accessKey: string, displayName?: string, allowedOrigins?: []string, allowedServices?: []Service) => (accessKey: AccessKey)
  - UpdateDefaultAccessKey(projectID: uint64, accessKey: string) => (ok: bool)
  - ListAccessKeys(projectId: uint64, active?: bool, service?: Service) => (accessKeys: []AccessKey)
  - DisableAccessKey(accessKey: string) => (ok: bool)

  # Usage
  - GetProjectQuota(projectId: uint64, now: timestamp) => (accessQuota: AccessQuota)
  - GetAccessQuota(accessKey: string, now: timestamp) => (accessQuota: AccessQuota)
  - ClearAccessQuotaCache(projectID: uint64) => (ok: bool)
  - GetAccountUsage(projectID: uint64, service?: Service, from?: timestamp, to?: timestamp) => (usage: AccessUsage)
  - GetAccessKeyUsage(accessKey: string, service?: Service, from?: timestamp, to?: timestamp) => (usage: AccessUsage)
  - GetAsyncUsage(projectID: uint64, service?: Service, from?: timestamp, to?: timestamp) => (usage: AccessUsage)
  - PrepareUsage(projectID: uint64, cycle: Cycle, now: timestamp) => (ok: bool)
  - ClearUsage(projectID: uint64, now: timestamp) => (ok: bool)
  - NotifyEvent(projectID: uint64, eventType: EventType) => (ok: bool)
  - UpdateProjectUsage(service: Service, now: timestamp, usage: map<uint64,AccessUsage>) => (ok: map<uint64,bool>)
  - UpdateKeyUsage(service: Service, now: timestamp, usage: map<string,AccessUsage>) => (ok: map<string,bool>)
  # DEPRECATED: this is now UpdateKeyUsage, and it will be removed in the future
  - UpdateUsage(service: Service, now: timestamp, usage: map<string,AccessUsage>) => (ok: map<string,bool>)

  # User permissions for a projectId
  - GetUserPermission(projectId: uint64, userId: string) => (permission: UserPermission, resourceAccess: ResourceAccess)
